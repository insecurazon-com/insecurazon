name: Build & Deploy Pipeline

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [master]

env:
  TF_STATE_BUCKET: insecurazon-terraform-state-bucket
  AWS_REGION: eu-central-1
  DEPLOYMENT_ROLE_ARN: arn:aws:iam::767398092878:role/GitHubActions-DeploymentRole

jobs:
  # Job 1: Get Infrastructure Info
  infrastructure-info:
    runs-on: ubuntu-24.04
    outputs:
      s3_bucket: ${{ steps.terraform_outputs.outputs.s3_bucket }}
      cloudfront_id: ${{ steps.terraform_outputs.outputs.cloudfront_id }}
      lambda_function_name: ${{ steps.terraform_outputs.outputs.lambda_function_name }}
    
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.DEPLOYMENT_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/checkout@v4
      
      - uses: hashicorp/setup-terraform@v3
      
      - name: Extract Terraform Outputs
        id: terraform_outputs
        run: |
          cd deploy/infrastructure
          echo "s3_bucket=$(terraform output -json storage_config | jq -r '.static_website_config.bucket_name')" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(terraform output -json storage_config | jq -r '.static_website_config.cloudfront_id')" >> $GITHUB_OUTPUT
          echo "lambda_function_name=$(terraform output -json compute_config | jq -r '.lambda_config.lambda_function_name')" >> $GITHUB_OUTPUT

  # Job 2: Build Applications
  build-apps:
    runs-on: ubuntu-24.04
    needs: infrastructure-info
    if: always() && (needs.infrastructure-info.result == 'success' || needs.infrastructure-info.result == 'skipped')
    strategy:
      matrix:
        app: [ins-webfe, ins-webserver]
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install Dependencies
        run: pnpm install
      
      - name: Build Application
        run: pnpm turbo run build --filter=${{ matrix.app }}
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: apps/${{ matrix.app }}/dist/

  # Job 3: Deploy ins-webfe to S3/CloudFront
  deploy-ins-webfe:
    runs-on: ubuntu-24.04
    needs: [infrastructure-info, build-apps]
    if: always() && needs.build-apps.result == 'success'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.DEPLOYMENT_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download ins-webfe Build
        uses: actions/download-artifact@v4
        with:
          name: ins-webfe-build
          path: apps/ins-webfe/dist/
      
      - name: Deploy to S3
        run: |
          chmod +x deploy/application/ins-webfe/deploy.sh
          ./deploy/application/ins-webfe/deploy.sh "${{ needs.infrastructure-info.outputs.s3_bucket }}"
      
      - name: Invalidate CloudFront
        if: needs.infrastructure-info.outputs.cloudfront_id != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.infrastructure-info.outputs.cloudfront_id }} \
            --paths "/*"

  # Job 4: Deploy ins-webserver to Lambda
  deploy-ins-webserver:
    runs-on: ubuntu-24.04
    needs: [infrastructure-info, build-apps]
    if: always() && needs.build-apps.result == 'success'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.DEPLOYMENT_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download ins-webserver Build
        uses: actions/download-artifact@v4
        with:
          name: ins-webserver-build
          path: apps/ins-webserver/dist/
      
      - name: Deploy to Lambda
        run: |
          chmod +x deploy/application/ins-webserver/deploy.sh
          ./deploy/application/ins-webserver/deploy.sh
